name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:

env:
  applicationfolder: spring-boot-hello-world-example
  AWS_REGION: ap-southeast-2
  S3BUCKET: codedeploystack-webappdeploymentbucket-joijcg6g6p1t

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
        name: Checkout Repository

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: chmod
        run: chmod -R +x ./.github

      - name: Build and Package Maven
        id: package
        working-directory: ${{ env.applicationfolder }}
        run: $GITHUB_WORKSPACE/.github/scripts/build.sh

      - name: Upload Artifact to s3
        working-directory: ${{ env.applicationfolder }}/target
        run: aws s3 cp *.war s3://${{ env.S3BUCKET }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: Dev
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}

      - run: |
          echo "Deploying branch ${{ env.GITHUB_REF }} to ${{ github.event.inputs.environment }}"
          commit_hash=`git rev-parse HEAD`
          deployment_info=$(aws deploy create-deployment --application-name CodeDeployAppNameWithASG --deployment-group-name CodeDeployGroupName --github-location repository=$GITHUB_REPOSITORY,commitId=$commit_hash --ignore-application-stop-failures)
          echo "$deployment_info" | jq -r '.deploymentId' > deployment_id.txt

      # Polling loop to check deployment status
      - name: Wait for Deployment
        id: wait-for-deployment
        run: |
          status="IN_PROGRESS"
          while [ "$status" == "IN_PROGRESS" ]; do
            sleep 30
            deployment_id=$(cat deployment_id.txt)
            status=$(aws deploy get-deployment --deployment-id $deployment_id --query 'deploymentInfo.status' --output text)
          done

      - name: Get Deployment Status and Failure Reason
        run: |
          deployment_id=$(cat deployment_id.txt)
          deployment_status=$(aws deploy get-deployment --deployment-id $deployment_id --query 'deploymentInfo.status' --output text)
          if [ "$deployment_status" =~ ^SUCCEEDED$ ]; then
            echo "Deployment succeeded."
          else
            echo "Deployment failed."
            failure_reason=$(aws deploy get-deployment --deployment-id $deployment_id --query 'deploymentInfo.errorInformation' --output text)
            echo "Failure reason: $failure_reason"
          fi
